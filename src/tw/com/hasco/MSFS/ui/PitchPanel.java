/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tw.com.hasco.MSFS.ui;


import java.awt.BasicStroke;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;
import tw.com.hasco.MSFS.FS.FSBasic;
import tw.com.hasco.MSFS.locale.LocaleManager;

/**
 *
 * @author ktc
 */
public class PitchPanel extends javax.swing.JPanel {

    double pitch;
    double aoa;
    double elevatorDeflection;
    double elevatorControl;
    BufferedImage plane;
    BufferedImage pic1;

    /**
     * Creates new form PlotTheta1Panel
     */
    public PitchPanel() {
        initComponents();
        try {
            pitch = 30;
            aoa = 15;
            this.elevatorDeflection = 60;
            this.elevatorControl = 0;
            ClassLoader classLoader = getClass().getClassLoader();

            plane = ImageIO.read(classLoader.getResourceAsStream("draw/airplane.png"));
            BufferedImage before = ImageIO.read(classLoader.getResourceAsStream("draw/pic1.png"));
            int w = before.getWidth();
            int h = before.getHeight();
            pic1 = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);
            AffineTransform at = new AffineTransform();
            at.scale(0.583, 0.583);
            AffineTransformOp scaleOp = 
                new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
            pic1 = scaleOp.filter(before, pic1);
            // pic1 = ImageIO.read(classLoader.getResourceAsStream("draw/pic1.png"));
        } catch (IOException ex) {
            Logger.getLogger(PitchPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(600, 600));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 350, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void paintComponent(Graphics g) {

        super.paintComponent(g);
        LocaleManager l = LocaleManager.getInstance("Taiwan");
        Graphics2D g2d = (Graphics2D) g;
        g2d.setRenderingHint(
                RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON
        );
        double width = getWidth();
        double height = getHeight();
        double planeWidth = plane.getWidth();
        double planeHeight = plane.getHeight();
        double x, y, x1, y1, x2, y2;
        // Font currentFont = g.getFont();
        // Font newFont = currentFont.deriveFont(currentFont.getSize() * 1.4F);
        // g.setFont(newFont);
        // title string
        x = 0.05 * width;
        y = 0.05 * height;
        g2d.drawString(l.getString("pitchPanelStr") + " Pitch Control & Attitude Dynamic Graphic", (int) x, (int) y);
        // symbol table
        x = 0.05 * width;
        y = 0.81 * height;
        g2d.drawString("\u03B8:" + l.getString("pitch") + ":" + (int)pitch, (int) x, (int) y);
        g2d.drawString("\u03B1:" + l.getString("aoa") + ":" + (int)aoa, (int) x  , (int) y + g.getFont().getSize()+10);
        g2d.drawString("\u03B4E:" + l.getString("elevatorDeflection")+ ":"+ (int) this.elevatorDeflection, (int) x, (int) y+ 2* g.getFont().getSize()+20);
        // draw pitch            
        double rot = Math.toRadians(pitch);
        AffineTransform at = new AffineTransform();
        // 4. translate it to the center of the component
        at.translate(width / 2, height / 2);
        // 3. do the actual rotation
        at.rotate(-1.0 * rot);
        // 2. just a scale because this image is big
        at.scale(0.583, 0.583);
        // 1. translate the object so that you rotate it around the 
        //    center (easier :))
        at.translate(-planeWidth / 2, -planeHeight / 2);

        // draw the image
        g2d.drawImage(plane, at, null);
        // draw pitch
        g.setColor(java.awt.Color.green);
        g2d.drawLine((int) (0.3 * width), (int) (height / 2), (int) (0.9 * width), (int) (height / 2));
        x1 = 0.5 * width + 0.4 * width * Math.cos(rot);
        y1 = 0.5 * height - 0.4 * width * Math.sin(rot);
        x2 = 0.5 * width - 0.3 * width * Math.cos(rot);
        y2 = 0.5 * height + 0.3 * width * Math.sin(rot);
        g.setColor(java.awt.Color.orange);
        g2d.drawLine((int) x1, (int) y1, (int) x2, (int) y2);
        x = 0.15 * width;
        y = height / 2.0 - 0.35 * width;
        g.setColor(java.awt.Color.green);
        g2d.drawArc((int) x, (int) y, (int) (0.7 * width), (int) (0.7 * width), 0, (int) pitch);
        x = 0.5 * width + 0.35 * width * Math.cos(rot / 2);
        y = 0.5 * height - 0.35 * width * Math.sin(rot / 2);
        g.setColor(java.awt.Color.black);
        g2d.drawString("\u03B8:" + (int)pitch, (int) x, (int) y);
        // draw aoa
        double aoaPitch = pitch - aoa;
        rot = Math.toRadians(aoaPitch);
        x1 = 0.5 * width;
        y1 = 0.5 * height;
        x2 = 0.5 * width + 0.3 * width * Math.cos(rot);
        y2 = 0.5 * height - 0.3 * width * Math.sin(rot);
        // System.out.println("" + pitch  + "  " + aoa );
        g.setColor(java.awt.Color.blue);
        g2d.drawLine((int) x1, (int) y1, (int) x2, (int) y2);

        x = 0.5 * width - 0.25 * width;
        y = 0.5 * height - 0.25 * width;
        g.setColor(java.awt.Color.blue);
        g2d.drawArc((int) x, (int) y, (int) (0.5 * width), (int) (0.5 * width), (int) (pitch - aoa), (int) aoa);
        aoaPitch = pitch - aoa / 2;
        rot = Math.toRadians(aoaPitch);
        x = 0.5 * width + 0.3 * width * Math.cos(rot);
        y = 0.5 * height - 0.3 * width * Math.sin(rot);
        g.setColor(java.awt.Color.black);
        g2d.drawString("\u03B1:" + (int) aoa, (int) x, (int) y);
        // draw elevatorDeflection
        double delta = elevatorDeflection - pitch;
        x1 = width / 2 - 0.25 * planeWidth * Math.cos(Math.toRadians(pitch));
        y1 = height / 2 + 0.25 * planeWidth * Math.sin(Math.toRadians(pitch));
        x2 = x1 - 0.2 * planeWidth * Math.cos(Math.toRadians(delta));
        y2 = y1 - 0.2 * planeWidth * Math.sin(Math.toRadians(delta));
        g.setColor(java.awt.Color.blue);
        g2d.setStroke(new BasicStroke(2));
        g2d.drawLine((int) x1, (int) y1, (int) x2, (int) y2);
        g2d.setStroke(new BasicStroke(1));
        x = x1 - 0.15 * planeWidth;
        y = y1 - 0.15 * planeWidth;
        g.setColor(java.awt.Color.blue);
        g2d.drawArc((int) x, (int) y, (int) (0.3 * planeWidth), (int) (0.3 * planeWidth), (int) (180 - delta), (int) elevatorDeflection);
        delta = elevatorDeflection / 2 - pitch;
        x = x1 - 0.25 * planeWidth * Math.cos(Math.toRadians(delta));
        y = y1 - 0.25 * planeWidth * Math.sin(Math.toRadians(delta));
        g.setColor(java.awt.Color.black);
        g2d.drawString("\u03B4E:" + (int) elevatorDeflection, (int) x, (int) y);
        // draw elevatorControl
        x = 0.7 *width  - pic1.getWidth() * .15*0.583;
        y = height * 0.98;
        g2d.drawString(l.getString("elevatorControl") + "%", (int) x, (int) y);
        x = 0.7 * width - pic1.getWidth() / 2 * 0.583;
        // x = width /2;
        y = height * 0.9 - pic1.getHeight() / 2 * 0.583;
        g2d.drawImage(pic1, (int) x, (int) y, null);
        
        x1 = width * 0.675;
        y1 = height * 0.92;
        double degree = Math.toRadians(this.elevatorControl * 0.45 + 90);
        x2 = x1 + 0.4 * 0.583 *  pic1.getHeight() * Math.cos(degree);
        y2 = y1 - 0.4 * 0.583 * pic1.getHeight() * Math.sin(degree);
        g2d.setStroke(new BasicStroke(3));
        g.setColor(java.awt.Color.blue);
        g2d.drawLine((int) x1, (int) y1, (int) x2, (int) y2);
        g2d.drawOval((int) x2 - 3, (int) y2 - 3, 6, 6);
        g.setColor(java.awt.Color.black);
        // 
        degree = Math.toRadians(this.elevatorControl * 0.9 * 0.25 + 90);
        x = x1 + 0.4 *0.583* pic1.getHeight() * Math.cos(degree);
        y = y1 - 0.4 * 0.583* pic1.getHeight() * Math.sin(degree);
        g2d.drawString("" + (int) elevatorControl + "%", (int) x, (int) y);
        x = x1 - 0.35 * 0.583* pic1.getHeight();
        y = y1 - 0.35 * 0.583 * pic1.getHeight();
        g2d.setStroke(new BasicStroke(1));
        g2d.drawArc((int) x, (int) y, (int) (0.7 * 0.583*pic1.getHeight()), (int) (0.7 * 0.583*pic1.getHeight()), 90, (int) (this.elevatorControl * 0.45));
        // g2d.drawImage(pic2, at,  this
    }

    public void update(FSBasic fsBasic) {
        pitch = fsBasic.pitch();
        aoa = fsBasic.aoa();
        elevatorDeflection = fsBasic.elevatorDeflection();
        elevatorControl = fsBasic.elevatorControl();
        repaint();
    }

    public static void main(String[] args) throws InterruptedException {

        JFrame f = new JFrame("Demo");
        JPanel p = new PitchPanel();
        f.add(p);

        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.setSize(350, 400);
        f.setVisible(true);
    }

}
